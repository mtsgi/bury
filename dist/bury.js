"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});class s{constructor(){const r=["Array","String","Number"],e={Array:s.ARRAY_METHODS(),String:s.STRING_METHODS(),Number:s.NUMBER_METHODS()},t={Array:Array.prototype,String:String.prototype,Number:Number.prototype};r.forEach(n=>{const u=e[n];for(const i in u)e[n][i].length===0?Object.defineProperty(t[n],i,{configurable:!0,enumerable:!1,get(){return e[n][i].apply(this)}}):t[n][i]=e[n][i]})}static ARRAY_METHODS(){return{first(){return this[0]},last(){return this[this.length-1]},min(){return this.reduce((r,e)=>Math.min(r,e))},max(){return this.reduce((r,e)=>Math.max(r,e))},sum(){return this.reduce((r,e)=>Number(r)+Number(e))},append(r){return this.push(...arguments),this},prepend(r){return[...arguments,...this]},compact(){return this.reduce((r,e)=>e?r.append(e):r,[])},uniq(){return this.reduce((r,e)=>r.indexOf(e)===-1?r.append(e):r,[])},each(r){return this.forEach(e=>r(e)),this},each_with_index(r){return this.forEach((e,t)=>r(e,t)),this},delete(r){return this.reduce((e,t)=>t!==r?e.append(t):e,[])},delete_if(r){return this.reduce((e,t)=>r(t)?e:e.append(t),[])},delete_at(r){return this.splice(r,1),this},clear(){return[]},union(r){return this.concat(r).uniq},size(){return this.length},minmax(){return[this.min,this.max]},min_by(r){return this.reduce((e,t)=>r(e)<r(t)?e:t)},max_by(r){return this.reduce((e,t)=>r(e)>r(t)?e:t)},find_all(r){return this.filter(r)},select(r){return this.find_all(r)},count(r){return this.find_all(r).size},rev(){return[...this].reverse()}}}static STRING_METHODS(){return{chop(){return this.slice(0,-1)},reverse(){return[...this].reverse().join("")},downcase(){return this.toLowerCase()},upcase(){return this.toUpperCase()},strip(){return this.trim()},gsub(r,e){return this.replace(r,e)},center(r){return[" ".repeat(r),this," ".repeat(r)].join("")},prepend(r){return[r,this].join("")},size(){return this.length}}}static NUMBER_METHODS(){return{floor(){return Math.floor(this)},ceil(){return Math.ceil(this)},abs(){return Math.abs(this)},next(){return Math.floor(this)+1},succ(){return this.next},pred(){return Math.ceil(this)-1},next_float(){return this+Number.EPSILON},prev_float(){return this-Number.EPSILON},to_s(){return this.toString()},inspect(){return this.to_s},times(r){for(const e of[...Array(this).keys()])r.apply(window,[e]);return this},clamp(r,e){return Math.min(Math.max(this,r),e)}}}}exports.Bury=s;
