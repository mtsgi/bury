"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});class i{constructor(){const t={Array:i.ARRAY_METHODS(),String:i.STRING_METHODS(),Number:i.NUMBER_METHODS()},e={Array:Array.prototype,String:String.prototype,Number:Number.prototype};for(const r in t)for(const n in t[r])t[r][n].length===0?Object.defineProperty(e[r],n,{configurable:!0,enumerable:!1,get(){return t[r][n].apply(this)}}):e[r][n]=t[r][n]}static ARRAY_METHODS(){return{first(){return this[0]},last(){return this[this.length-1]},min(){return this.reduce((t,e)=>Math.min(t,e))},max(){return this.reduce((t,e)=>Math.max(t,e))},sum(){return this.reduce((t,e)=>Number(t)+Number(e))},append(t){return this.push(...arguments),this},prepend(t){return[...arguments,...this]},compact(){return this.reduce((t,e)=>e?t.append(e):t,[])},uniq(){return this.reduce((t,e)=>t.indexOf(e)===-1?t.append(e):t,[])},each(t){return this.forEach(e=>t(e)),this},each_with_index(t){return this.forEach((e,r)=>t(e,r)),this},delete(t){return this.reduce((e,r)=>r!==t?e.append(r):e,[])},delete_if(t){return this.reduce((e,r)=>t(r)?e:e.append(r),[])},delete_at(t){return this.splice(t,1),this},clear(){return[]},union(t){return this.concat(t).uniq},size(){return this.length},minmax(){return[this.min,this.max]},min_by(t){return this.reduce((e,r)=>t(e)<t(r)?e:r)},max_by(t){return this.reduce((e,r)=>t(e)>t(r)?e:r)},find_all(t){return this.filter(t)},select(t){return this.find_all(t)},count(t){return this.find_all(t).size},rev(){return[...this].reverse()}}}static STRING_METHODS(){return{chop(){return this.slice(0,-1)},reverse(){return[...this].reverse().join("")},downcase(){return this.toLowerCase()},upcase(){return this.toUpperCase()},strip(){return this.trim()},gsub(t,e){return this.replace(t,e)},center(t){return[" ".repeat(t),this," ".repeat(t)].join("")},prepend(t){return[t,this].join("")},size(){return this.length}}}static NUMBER_METHODS(){return{floor(){return Math.floor(this)},ceil(){return Math.ceil(this)},abs(){return Math.abs(this)},next(){return Math.floor(this)+1},succ(){return this.next},pred(){return Math.ceil(this)-1},next_float(){return this+Number.EPSILON},prev_float(){return this-Number.EPSILON},to_s(){return this.toString()},inspect(){return this.to_s},times(t){for(const e of[...Array(this).keys()])t.apply(window,[e]);return this},clamp(t,e){return Math.min(Math.max(this,t),e)}}}}exports.Bury=i;
